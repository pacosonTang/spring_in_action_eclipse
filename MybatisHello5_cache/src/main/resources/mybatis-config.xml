<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 
		1)properteis
		1.1、mybatis 可以使用properties 标签来引入外部properties配置文件的内容；
		1.2、resource 引入类路径下 的资源；
		1.3、url 是引入网络路径或磁盘路径下的资源；
	 -->
	<properties resource="dbconfig.properties"></properties>
	
	<!-- 
		2)settings 包含很多重要的设置项
		2.1、setting 用来设置每一个设置项：
			name: 设置项名称， value：设置项取值；
			
	 -->
	 <!-- 开启驼峰命名规则，数据库表字段 a_b 可以解析为 类成员变量 aB -->
	 <!-- 显示指定每个需要更改的配置项，即使有默认值，防止版本更新带来的问题 -->
	 <settings>
	 	<!-- 开启驼峰命名法 -->
	 	<setting name="mapUnderscoreToCamelCase" value="false"/>
	 	<!-- 懒加载 -->
	 	<setting name="lazyLoadingEnabled" value="true"/>
	 	<!-- 侵入型懒加载 -->
	 	<setting name="aggressiveLazyLoading" value="false"/>
	 	<setting name="cacheEnabled" value="true"/>
	 </settings>
	 
	 <!-- 
	 	3)别名处理器：可以为java类型起别名（注意：别名不区分大小写）
	 	3.1) typeAlias为某一个java类型取别名， type：指定要起别名的类型全类名，默认别名就是类名小写，employee
	 				alias: 指定新的 别名；
	 	3.3）
	  -->
	 <typeAliases>
	 	<!-- 
	 		3.1) typeAlias为某一个java类型取别名， type：指定要起别名的类型全类名，默认别名就是类名小写，employee
	 				alias: 指定新的 别名；
	 	 
	 	<typeAlias type="com.swjtu.mybatis.bean.Employee" alias="emp"/>
	 	-->
	 	<!-- 
	 		3.2)package: 为某个包下的所有类批量起别名:
	 			name: 指定包名，为当前包以及所有的子包的每个类都起一个默认别名（类名小写）；
	 	-->
	 	<!-- 
	 		3.3) 批量起别名的情况下，可以使用注解 Alias()为某个类型指定新的别名；
	 			  存在 a 包 和 a.b 包下都有 Employee类的情况；
	 	 -->
	 	<package name="com.swjtu.mybatis.bean"/>
	 </typeAliases>
	 
	 <!-- 
	 	4、environments： 环境们， mybatis可以配置多种环境， default指定使用某种环境。可以达到快速切换环境。
	 		4.1)environment：配置一个具体的环境信息；必须有两个标签：id代表当前环境的唯一标识
	 			4.1.1) transactionManager 必须有， 事务管理器，
	 				type 事务管理器类型，type="[JDBC|MANAGED]" 
	 				          自定义事务管理器：实现 TransactionFactory 接口， type指定全类名 
	 				Configuration类中定义了别名： org.apache.ibatis.session.Configuration
		 				 typeAliasRegistry.registerAlias("JDBC", JdbcTransactionFactory.class);
	    				 typeAliasRegistry.registerAlias("MANAGED", ManagedTransactionFactory.class);
	 			
	 			4.1.2) dataSource 数据源：
	 				   	type：数据源类型 type="[UNPOOLED|POOLED|JNDI]"
	 				   			  typeAliasRegistry.registerAlias("JNDI", JndiDataSourceFactory.class);
								    typeAliasRegistry.registerAlias("POOLED", PooledDataSourceFactory.class);
								    typeAliasRegistry.registerAlias("UNPOOLED", UnpooledDataSourceFactory.class);
						自定义数据源： 实现 DataSourceFactory 接口 ， type 为自定义数据源的全类名 			 				   			  
	  -->					  	
	<environments default="development">
		<!-- 测试环境 -->
		<environment id="test">
			<transactionManager type="JDBC"/>
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}"/>
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.username}"/>
				<property name="password" value="${jdbc.password}"/>
			</dataSource>
		</environment>
		
		<!-- 开发环境 -->
		<environment id="development">
			<transactionManager type="JDBC"/>
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}"/>
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.username}"/>
				<property name="password" value="${jdbc.password}"/>
			</dataSource>
		</environment>
	</environments>
	
	<!-- 
		5、databaseIdProvider ：支持多数据库厂商的；
			type=DB_VENDOR: VendorDatabaseIdProvider
			作用就是得到数据库厂商标识（由数据库驱动自己附带的 getDatabaseProductName），mybatis根据该标识执行不同的sql；
			并在 sql 标签如<select> 添加属性 databaseId 属性
	--> 
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同数据库厂商起别名 -->
		<property name="Mysql" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlserver"/>
	</databaseIdProvider> 
	
	<!-- 
		将我们写好的sql 映射文件 EmployeeMapper.xml 一定要注册到全局配置文件 mybatis-config.xml 中；
		6、mappers：将sql映射注册到全局配置中；
	 --> 
	<mappers>
		<!-- 
			mapper标签： 注册一个sql映射
				注册配置文件的两种方法：
					方法1：resource： 引用类路径下的sql 映射文件；
					方法2：url： 引用网络路径或磁盘路径下的 sql 映射文件；
				注册接口的方法：
					方法1 class： 直接引用（注册）接口， 写接口的全类名；
						补充1：  有sql映射文件，映射文件名必须和接口同名，并且仿造同一个目录下；
						补充2： 没有sql映射文件， 所有sql 利用注解修饰接口上；
						补充3： 不推荐使用注解，而使用sql映射文件的方式来 进行sql 映射。
						
		 -->
		<!-- <mapper resource="com\swjtu\mybatis\dao\EmployeeMapper.xml"/>
		<mapper class="com.swjtu.mybatis.dao.EmployeeMapperAnnotation"/> -->
		
		<!-- 
			批量注册： 前提是要把 Mapper类文件和Mapper sql 映射文件放在同目录下
			荔枝：<package name="com.swjtu.mybatis.dao"/> 可以吧 该包下的所有mapper 映射文件注册到全局配置环境中；
		 -->
		 <package name="com.swjtu.mybatis.dao"/>
	</mappers>
	
	
	
	
	
	
	
	
	
	
</configuration>