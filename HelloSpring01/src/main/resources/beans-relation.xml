<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 一、配置bean上的继承关系 -->
	<!-- 方法1、传统方法配置bean -->
	<bean id="address" class="com.swjtu.spring.beans.autowire.Address"
	      p:city="chengdu" p:street="tianfusanjie"></bean>
	
	<!-- 方法2、采用继承方式配置bean，使用bean元素的parent属性 -->      
    <bean id="address2" parent="address" 
          p:street="tianfusanjie2"></bean>
    
    <!-- 
    	方法3、抽象bean： bean的abstract属性设置为true 的bean。
    	这样的bean 不能被ioc实例化， 只用来被继承配置。
    	若某一个bean的class属性没有被指定，则该bean必须是一个 抽象bean。
    -->
	<bean id="address3" 
	      p:city="chengdu3" p:street="tianfusanjie3" abstract="true"></bean> 
	 
	 <bean id="address4" parent="address3" class="com.swjtu.spring.beans.autowire.Address"
          p:street="tianfusanjie4"></bean>  
     
     <!-- 二、配置bean上的依赖关系 -->
     <!-- 要求再配置person时，必须有一个关联的car。
     	    换句话说， person这个bean必须依赖于car这个bean -->     
     <bean id="car" class="com.swjtu.spring.beans.autowire.Car"
          p:brand="dazhogn" p:price="300000"></bean>                     
     <bean id="person" class="com.swjtu.spring.beans.autowire.Person"
          p:name="lisi" p:address-ref="address4" depends-on="car"></bean>
          
</beans>
