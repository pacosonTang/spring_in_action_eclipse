<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	<!-- 
		配置bean
		class: bean的全类名， 通过反射的方式在ioc 容器中创建bean， 
		所以要求 bean中必须有无参构造器；	
		id：标识容器中的bean， id唯一。
		通过  <property name="name" value="spring"></property> 中的value属性值来引用bean;
		
	 -->
	<bean name="helloWorld" class="com.swjtu.spring.beans.HelloWorld">
		<property name="name" value="spring"></property>
	</bean>
	
	<bean name="helloWorld2" class="com.swjtu.spring.beans.HelloWorld">
		<property name="name" value="spring2"></property>
	</bean>
	
	
	
	<!-- 
		通过构造方法来配置 bean 的属性, index表示顺序， type表示参数类型
	 -->
	 <bean id="car" class="com.swjtu.spring.beans.Car">
	 	<constructor-arg value="audi" index="0"></constructor-arg>
	 	<constructor-arg value="shhai" index="1"></constructor-arg>
	 	<constructor-arg value="30000" index="2"></constructor-arg>
	 </bean>
	 <!-- 使用构造器注入属性值可以指定参数的位置和类型，以区分重载的构造器  -->
	  <bean id="car2" class="com.swjtu.spring.beans.Car">
	 	<constructor-arg value="audi A6L" index="0" type="java.lang.String"></constructor-arg>
	 	<!-- <constructor-arg value="<shhai>" index="1" type="java.lang.String"></constructor-arg> -->
	 	<!-- 如果字面值包含特殊字符（如 < 或 > ）可以使用  <![CDATA[<shhai>]]> 包裹起来-->
	 	<!-- 属性值可以使用 value 子节点进行配置  -->
	 	<constructor-arg index="1" type="java.lang.String">
	 		<value><![CDATA[<shhai>]]></value>
	 	</constructor-arg>
	 	<!-- <constructor-arg value="200" index="2" type="double"></constructor-arg> -->
	 	<constructor-arg index="2" type="double">
	 		<value>200</value>
	 	</constructor-arg>
	 </bean>
	 
	 <!-- 配置  com.swjtu.spring.beans.Person bean-->
	 <bean id="person" class="com.swjtu.spring.beans.Person">
	 	<property name="name" value="tom"></property>
	 	<property name="age" value="30"></property>
	 	<!-- 1、可以使用 property 的ref 属性建立bean之间的引用关系  -->
	 	<!-- <property name="car" ref="car"></property> -->
	 	
	 	<!-- 2、可以使用 property 的ref 子元素建立bean之间的引用关系  -->
	 	<!-- <property name="car">
	 		<ref bean="car2"/>
	 	</property> -->
	 	
	 	<!-- 3、内部bean，可以不写id，该bean不能被外部组件引用，只能在内部使用 -->
	 	<property name="car">
	 		<bean class="com.swjtu.spring.beans.Car">
	 			<constructor-arg value="audi3" index="0"></constructor-arg>
			 	<constructor-arg value="shhai3" index="1"></constructor-arg>
			 	<constructor-arg value="300003" index="2"></constructor-arg>
	 		</bean>
	 	</property>
	 </bean>
	 
	 
	  <!-- 在构造器中配置内部bean-->
	 <bean id="person2" class="com.swjtu.spring.beans.Person">
	 	<constructor-arg value="lisi"></constructor-arg>
	 	<constructor-arg value="28"></constructor-arg>
	 	<!-- 构造器参数 -->
	 	<constructor-arg>
	 		<!-- 内部bean -->
	 		<bean class="com.swjtu.spring.beans.Car">
	 			<constructor-arg value="audi4" index="0"></constructor-arg>
			 	<constructor-arg value="shhai4" index="1"></constructor-arg>
			 	<constructor-arg value="300004" index="2"></constructor-arg>
	 		</bean>
	 	</constructor-arg>
	 </bean>
	 
	 <!-- 测试赋值 null-->
	 <bean id="person3" class="com.swjtu.spring.beans.Person">
	 	<constructor-arg value="lisi3"></constructor-arg>
	 	<constructor-arg value="283"></constructor-arg>
	 	<!-- 设置car为null值 -->
	 	<constructor-arg><null/></constructor-arg>
	 </bean>
	 
	 <!-- 
		 测试为级联属性赋值, 
		 注意：属性需要先初始化后才可以为级联属性赋值， 否则有异常；
		 和struts2 不同。 
	 -->
	 <bean id="person4" class="com.swjtu.spring.beans.Person">
	 	<constructor-arg value="lisi4"></constructor-arg>
	 	<constructor-arg value="284"></constructor-arg>
	 	<constructor-arg ref="car"></constructor-arg>
	 	<!-- 为级联属性赋值, 如car.price， car.brand  -->
	 	<property name="car.price" value="1034"></property>
	 	<property name="car.brand" value="audiA4L"></property>
	 </bean>
	 
	 
	 <!-- 测试如何配置list集合属性 -->
	 <bean id="richPerson" class="com.swjtu.spring.beans.collection.RichPerson">
	 	<property name="name" value="Jack Ma"></property>
	 	<property name="age" value="55"></property>
	 	<property name="cars">
	 		<!-- 使用list元素为list类型的集合属性赋值  -->
	 		<list >
	 			<ref bean="car" />
	 			<ref bean="car2" />
	 			<!-- 内部bean -->
		 		<bean class="com.swjtu.spring.beans.Car">
		 			<constructor-arg value="audi4" index="0"></constructor-arg>
				 	<constructor-arg value="shhai4" index="1"></constructor-arg>
				 	<constructor-arg value="300004" index="2"></constructor-arg>
		 		</bean>
	 		</list>
	 	</property>
	 </bean>
	 
	  <!-- 测试如何配置map集合属性 -->
	 <bean id="mapPerson" class="com.swjtu.spring.beans.collection.MapPerson">
	 	<property name="name" value="Jack Ma Map"></property>
	 	<property name="age" value="55"></property>
	 	<property name="cars">
	 		<!-- 使用map标签和map的子标签 entry 配置map类型的成员变量 -->
	 		<map>
		 		<entry key="car1" value-ref="car"></entry>
		 		<entry key="car2" value-ref="car2"></entry>
		 		<entry key="car3">
		 			<!-- 内部bean -->
			 		<bean class="com.swjtu.spring.beans.Car">
			 			<constructor-arg value="audiMap" index="0"></constructor-arg>
					 	<constructor-arg value="shhaiMap" index="1"></constructor-arg>
					 	<constructor-arg value="300005" index="2"></constructor-arg>
			 		</bean>
		 		</entry>
	 		</map>
	 	</property>
	 </bean>
	 
	   <!-- 测试如何配置  Properteis 集合属性 -->
	 <bean id="myDataSource" class="com.swjtu.spring.beans.MyDataSource">
	 	<property name="properties">
	 		<!-- 使用 props元素 和 prop 子元素 为 Properties属性赋值 -->
	 		<props>
	 			<prop key="user">root</prop>
	 			<prop key="password">root</prop>
	 			<prop key="driver">com.mysql.cj.jdbc.Driver</prop>
	 			<prop key="url">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC</prop>
	 		</props>
	 	</property>
	 </bean>
	 
	 <!-- 配置独立的集合bean， 以供多个bean引用该集合bean
	 ，需要导入 util 命名空间  -->
	 <util:list id="cars">
	 	<ref bean="car"/>
	 	<ref bean="car2"/>
	 </util:list>
	 
	  <!-- 测试如何 引入 独立的List集合bean-->
	 <bean id="richPerson2" class="com.swjtu.spring.beans.collection.RichPerson">
	 	<property name="name" value="Jack Ma"></property>
	 	<property name="age" value="55"></property>
	 	<property name="cars" ref="cars"></property>
	 </bean>
	 
	 <!-- 通过p命名空间为bean属性赋值， 需要先导入 p 命名空间，
	 相对于传统的配置方式，使用p命名空间更加的简洁  -->
	 <bean id="person5" class="com.swjtu.spring.beans.Person" 
	       p:age="35" p:name="wangwu" p:car-ref="car2">
	 </bean>
	 
</beans>
