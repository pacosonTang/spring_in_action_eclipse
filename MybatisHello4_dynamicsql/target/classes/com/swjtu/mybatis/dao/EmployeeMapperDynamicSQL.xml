<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.swjtu.mybatis.dao.EmployeeMapperDynamicSQL">
	<!-- 
		if
		• choose (when, otherwise)
		• trim (where, set)
		• foreach
	 -->	
	 <!-- 定义结果集封装 -->
	 <resultMap type="emp" id="myEmpWithDept">
	 	<result column="ID" property="id"/>
	 	<result column="LASTNAME" property="lastName"/>
	 	<result column="EMAIL" property="email"/>
	 	<result column="GENDER" property="gender"/>
	 	<result column="DEPT_ID" property="depart.id"/>
	 	<result column="DEPT_NAME" property="depart.deptName"/>
	 </resultMap>
	 
	<!-- 查询员工，要求，携带了哪个字段，查询条件就带上这个字段的值 -->
	<!-- public List<Employee> getEmpListByConditionIf(Employee e); -->
	<select id="getEmpListByConditionIf" resultMap="myEmpWithDept">
		SELECT a.id AS ID
		       , a.last_name AS LASTNAME
		       , a.email AS EMAIL
		       , a.gender AS GENDER
		       , b.id AS DEPT_ID
		       , b.dept_name AS DEPT_NAME
		  FROM emp_tbl a 
		 INNER JOIN dept_tbl b
		    ON a.dept_id = b.id
	   <where> 
		 	   <!-- test判断表达式==OGNL表达式, OGNL表达式的使用参考ppt或官方文档 -->
		 	   <if test="ID != null and ID.trim() != ''"> 
		 		   AND a.id = #{ID}
	 		   </if>
	 		   <if test="LAST_NAME != null and LAST_NAME.trim() != ''"> 
		 		   AND a.last_name = #{LAST_NAME}
	 		   </if>
	 		   <if test="EMAIL != null and EMAIL.trim() != ''"> 
		 	   	   AND a.email = #{EMAIL}
	 		   </if>
	 		   <if test="GENDER != null and GENDER.trim() != ''"> 
		 		  AND a.email = #{GENDER}
	 		   </if>
	  </where>  
   </select>	
	
	<!-- 后面多出的and或者or where标签不能解决 
	 	prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
	 			prefix给拼串后的整个字符串加一个前缀 
	 	prefixOverrides="":  前缀覆盖： 去掉整个字符串前面多余的字符
	 	suffix="":后缀 ， suffix给拼串后的整个字符串加一个后缀 
	 	suffixOverrides="" 后缀覆盖：去掉整个字符串后面多余的字符
	 	-->
	<!-- 查询员工，要求，携带了哪个字段，查询条件就带上这个字段的值 -->
	<!-- public List<Employee> getEmpListByConditionTrim(Employee e); -->
	<select id="getEmpListByConditionTrim" resultMap="myEmpWithDept">
		SELECT a.id AS ID
		       , a.last_name AS LASTNAME
		       , a.email AS EMAIL
		       , a.gender AS GENDER
		       , b.id AS DEPT_ID
		       , b.dept_name AS DEPT_NAME
		  FROM emp_tbl a 
		 INNER JOIN dept_tbl b
		    ON a.dept_id = b.id
	   <trim prefix="where" suffixOverrides="and"> 
		 	   <!-- test判断表达式==OGNL表达式, OGNL表达式的使用参考ppt或官方文档 -->
		 	   <if test="ID != null and ID.trim() != ''"> 
		 		    a.id = #{ID} AND
	 		   </if>
	 		   <if test="LAST_NAME != null and LAST_NAME.trim() != ''"> 
		 		    a.last_name = #{LAST_NAME} AND
	 		   </if>
	 		   <if test="EMAIL != null and EMAIL.trim() != ''"> 
		 	   	    a.email = #{EMAIL} AND
	 		   </if>
	 		   <if test="GENDER != null and GENDER.trim() != ''"> 
		 		   a.gender = #{GENDER} AND
	 		   </if>
	  </trim>  
   </select>	
	
	
	<!-- 查询员工，要求，携带了哪个字段，查询条件就带上这个字段的值 -->
	<!-- public List<Employee> getEmpListByConditionTrim(Employee e); -->
	<select id="getEmpListByConditionChoose" resultMap="myEmpWithDept">
		SELECT a.id AS ID
		       , a.last_name AS LASTNAME
		       , a.email AS EMAIL
		       , a.gender AS GENDER
		       , b.id AS DEPT_ID
		       , b.dept_name AS DEPT_NAME
		  FROM emp_tbl a 
		 INNER JOIN dept_tbl b
		    ON a.dept_id = b.id
	   <where>
	   	       <!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 -->
	   	       <choose>
		   	       <when test="ID != null"> <!-- if { -->
		   	       		a.id = #{ID}
		   	       </when>
		   	       <when test="LAST_NAME != null"> <!-- else if { -->
		   	       		a.last_name like #{LAST_NAME}
		   	       </when>
		   	        <when test="EMAIL != null"> <!-- else if { -->
		   	       		a.email like #{EMAIL}
		   	       </when>
		   	       <otherwise> <!-- else { -->
		   	       		a.gender like #{GENDER}
		   	       </otherwise>
	   	       </choose>
	  </where>
   </select>	
	
	<!-- /* 使用set标签更新员工 */
	public int updEmp(Employee e); -->
	<update id="updEmp">
		UPDATE emp_tbl
		 <set> 
		       <if test="LAST_NAME != null">
		   	     , last_name = #{LAST_NAME}  
		       </if>
		       <if test="EMAIL != null">
		   	     , email = #{EMAIL}  
		       </if>
		       <if test="GENDER != null">
		   	     , gender = #{GENDER} 
		       </if>
	     </set>
		 WHERE id = #{ID}
	</update>
	
	
	
	<!-- /*使用foreach标签查询员工列表 */
	public List<Employee> getEmpListByConditionForeach(Map<String, Object> map); -->
	<select id="getEmpListByConditionForeach" resultMap="myEmpWithDept">
		SELECT a.id AS ID
		       , a.last_name AS LASTNAME
		       , a.email AS EMAIL
		       , a.gender AS GENDER
		       , b.id AS DEPT_ID
		       , b.dept_name AS DEPT_NAME
		  FROM emp_tbl a 
		 INNER JOIN dept_tbl b
		    ON a.dept_id = b.id
	     WHERE a.id 
	       IN ( <foreach collection="list" item="item" separator=", ">
		           #{item}
		        </foreach>
	          )
          <!--
	 		collection：指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值
	 		
	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
 	  -->
   </select>	
	
	
	<!-- /*使用foreach标签插入员工列表 */
	public int addEmpListByForeach(List<Employee> list); -->
	<insert id="addEmpListByForeach">
		INSERT 
		  INTO emp_tbl (last_name, email, gender, dept_id)
	    VALUES <foreach collection="list" separator=", " item="item">
	    		( #{item.lastName} 
	    		  , #{item.email}
	    		  , #{item.gender}
	    		  , #{item.depart.id} <!-- 这里涉及到级联属性插入 -->
    		    )	
	           </foreach> 
	</insert>
	
	<!-- 两个内置参数：
	 	不只是方法传递过来的参数可以被用来判断，取值。。。
	 	mybatis默认还有两个内置参数：
	 	_parameter:代表整个参数
	 		单个参数：_parameter就是这个参数
	 		多个参数：参数会被封装为一个map；_parameter就是代表这个map
	 	
	 	_databaseId:如果配置了databaseIdProvider标签。
	 		_databaseId就是代表当前数据库的别名oracle
	  -->
	
	<!-- /*使用  mybatis内置参数 查询员工列表 */
	public List<Employee> getEmpListByInnerParameter(List<Integer> list); -->
	<select id="getEmpListByInnerParameter" resultMap="myEmpWithDept">
		 <!-- <if test="_databaseId='oracle'">  这里可以切换到oracle数据库-->
		 <!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
		<if test="_databaseId='mysql'">
			SELECT a.id AS ID
		       , a.last_name AS LASTNAME
		       , a.email AS EMAIL
		       , a.gender AS GENDER
		       , b.id AS DEPT_ID
		       , b.dept_name AS DEPT_NAME
		  FROM emp_tbl a 
		 INNER JOIN dept_tbl b
		    ON a.dept_id = b.id
	     WHERE a.id 
	       IN ( <foreach collection="_parameter.list" item="item" separator=", ">
		           #{item}
		        </foreach>
	          )
		</if>
	</select>
	
	<!-- /*使用  bind标签 查询员工列表  */
	public List<Employee> getEmpListByBind(List<Object> list); -->
	<select id="getEmpListByBind" resultMap="myEmpWithDept">
		 <!-- <if test="_databaseId='oracle'">  这里可以切换到oracle数据库-->
		 <!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
		<bind name="LAST_NAME_BIND" value="'%'+LAST_NAME+'%'"/>
		<if test="_databaseId='mysql'">
			SELECT a.id AS ID
		       , a.last_name AS LASTNAME
		       , a.email AS EMAIL
		       , a.gender AS GENDER
		       , b.id AS DEPT_ID
		       , b.dept_name AS DEPT_NAME
		  FROM emp_tbl a 
		 INNER JOIN dept_tbl b
		    ON a.dept_id = b.id
	     WHERE a.last_name 
	      LIKE #{LAST_NAME_BIND}
		</if>
	</select>
	
	
	 <!-- 
	  	抽取可重用的sql片段。方便后面引用 
	  	1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用
	  	2、include来引用已经抽取的sql：
	  	3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
	  			include-property：取值的正确方式${prop},
	  			#{不能使用这种方式}
	  -->
	  <sql id="insertColumn">
	  	last_name, email, gender, dept_id
	  </sql>
	
	<!-- /*使用  sql标签 插入员工列表 */
	public int addEmpListByForeachAndSql(List<Employee> list); -->
	<insert id="addEmpListByForeachAndSql">
		INSERT 
		  INTO emp_tbl (
		  		<include refid="insertColumn"></include>
		       ) 
	    VALUES <foreach collection="list" separator=", " item="item">
	    		( #{item.lastName} 
	    		  , #{item.email}
	    		  , #{item.gender}
	    		  , #{item.depart.id} <!-- 这里涉及到级联属性插入 -->
    		    )	
	           </foreach> 
	</insert>
	
	
	
</mapper>