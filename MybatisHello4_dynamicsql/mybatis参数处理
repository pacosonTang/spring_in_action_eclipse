单个参数： mybatis 不会做特殊处理， 
	#{参数名}： 取出参数值， mapper文件中的 参数名 任意写
	
	
多个参数： mybatis 会做特殊处理：
		  多个参数会被封装成一个 map：
		  	key: param1...paramN， 或者参数的索引也可以， 
		  	value: 传入的参数值 
		  #{} 就是从 map中获取指定的key的值；
		  
	出现异常：
	org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [0, 1, param1, param2]
### Cause: org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [0, 1, param1, param2]
	操作：
		方法： public Employee getEmpByIdAndLastName(Integer id, String lastName)
		取值： #{id}, #{lastName};

命名参数： 明确指定封装参数时，map的key；
public Employee getEmpByIdAndLastName(@Param("id") Integer id, @Param("lastName") String lastName);
多个参数会被封装为 一个 map

<!-- 根据id和lastName查询员工 -->
	<select id="getEmpByIdAndLastName" resultType="com.swjtu.mybatis.bean.Employee">
		SELECT id AS ID
		       , last_name AS LASTNAME
		       , email AS EMAIL
		       , gender AS GENDER
		  FROM emp_tbl 
		 WHERE id = #{id}
		   and last_name = #{lastName}
	</select>


传入POJO：	
如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo
	#{属性名}: 取出传入的pojo属性值；

传入Map（不经常使用的数据，封装到map）： 
如果多个参数 不是 业务模型数据，没有对应的pojo， 为了方便， 我们也可以传入map
	#{key} 取出map中对应的值  

TO（经常使用的数据，封装到 TO）
如果多个参数，虽然不是业务模型中的 数据， 但是经常要使用，推荐编写一个TO（transfer object） 数据传输对象
page {
	int index;
	int size;
} 	


========================思考================================	
public Employee getEmp(@Param("id")Integer id,String lastName);
	取值：id==>#{id/param1}   lastName==>#{param2}

public Employee getEmp(Integer id,@Param("e")Employee emp);
	取值：id==>#{param1}    lastName===>#{param2.lastName/e.lastName}

##特别注意：如果是Collection（List、Set）类型或者是数组，
		 也会特殊处理。也是把传入的list或者数组封装在map中。
			key：Collection（collection）,如果是List还可以使用这个key(list)
				数组(array)
public Employee getEmpById(List<Integer> ids);
	取值：取出第一个id的值：   #{list[0]}
	
========================结合源码，mybatis怎么处理参数==========================
总结：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装时使用的key；
#{key}就可以取出map中的值；

public Employee getEmpByIdAndLastName(@Param("id") Integer id, @Param("lastName") String lastName);

ParamNameResolver 解析参数封装map的：
// 1、name: {0=id, 1=lastName}， ParamNameResolver构造方法就将其初始化了
// 	1.1  获取每个标了 param注解的参数的param值：id, lastName； 赋值给name；
//  1.2 每次解析一个参数给map中保存信息：key是参数索引； value是name的值； 
		name的值：
		标注了 param注解：注解的值；
		没有标注：
			1.全局配置： useActualParamName(jdk1.8): name=参数名
			2.name=map.size(); 相当于当前元素索引； 

// org.apache.ibatis.reflection.ParamNameResolver.getNamedParams(Object[])
public Object getNamedParams(Object[] args) {
    final int paramCount = names.size();
    // 1、参数为null，直接返回
    if (args == null || paramCount == 0) {
      return null;
      // 2、如果只有一个元素，并且没有param注解：调用 args[0]; 单个参数直接返回
    } else if (!hasParamAnnotation && paramCount == 1) {
      return args[names.firstKey()];
      // 3、多个元素或有param标注： 
    } else {
      final Map<String, Object> param = new ParamMap<Object>();
      int i = 0;
      
      // 4、遍历names集合， {0=id, 1=lastName} 
      for (Map.Entry<Integer, String> entry : names.entrySet()) {
      
        // name集合的value作为key， names集合的key又作为取值的参考；
        // 封装效果为： {id=args[0]=1, lastName=args[1]="tom"}  
        param.put(entry.getValue(), args[entry.getKey()]);
        // add generic param names (param1, param2, ...)
        // 额外的将每个参数保存到map中，使用的新的key： param1, param2, ..., paramN
        // 封装效果： 有 param注解可以 #{指定的key} 或  #{param1}
        final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);
        // ensure not to overwrite parameter named with @Param
        if (!names.containsValue(genericParamName)) {
          param.put(genericParamName, args[entry.getKey()]);
        }
        i++;
      }
      return param;
    }
  }



======================== 参数值的获取 =================
#{} 可以获取map中的值或者pojo对象属性的值；
${} 可以获取map中的值或者pojo对象属性的值；
#{} 与 ${} 的区别如下：
	select * from emp_tbl where id=${id} and last_name=#{lastName}
	Preparing: select * from emp_tbl  where id=2 and last_name=?
	#{} ： 是以预编译的形式，将参数设置到sql 语句中；PreparedStatement；防止sql注入；
	${} : 取出的值直接拼装在sql语句中：会有安全问题；
	大多情况下，我们取参数的值都应该去使用 #{}；
	
	原生jdbc不支持占位符的地方我们就可以使用 ${} 进行取值；
		比如分表，排序等： 按照年份分表拆分：
			select * from 2016_salary or 2017_salary
			select * from emp_tbl order by ${},  ${}

============================================================
#{} 取值时更丰富的用法：
	规定参数的一些规则：
		javaType、jdbcType、mode（存储过程）、numericScale、
		resultMap、typeHandler、jdbcTypeName、、expression（表达式，未来准备支持的功能）
	
	jdbcType 通常需要在某种特定的条件下被设置；
		在我们数据为null的时候，有些数据库可能不能识别 mybatis 对 null的默认处理；
		比如oracle（当保存一个null的字段，oracle会报错）；
		 
		 	JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;
		
		由于全局配置，即 mybatis-config.xml文件中：jdbcTypeForNull=OTHER；oracle不支持；两种办法
		1、#{email,jdbcType=OTHER};
		2、jdbcTypeForNull=NULL
			<setting name="jdbcTypeForNull" value="NULL"/>
	
	
	
	
	
	
	
	
	

	
	
	
	
	